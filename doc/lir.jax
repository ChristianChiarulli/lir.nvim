*lir.nvim*


==============================================================================
INTRODUCTION                                               *lir-instroduction*

simple file explorer


==============================================================================
REQUIREMENTS                                                *lir-requirements*

- Neovim Nightly (0.5)


==============================================================================
INTERFACE                                                      *lir-interface*

------------------------------------------------------------------------------
FUNCTIONS                                                      *lir-functions*

lir.setup([{opts}])                                              *lir.setup()*
   lir のセットアップをします。
   |lir-settings| を見てください。

lir.get_context([{bufnr}])                                 *lir.get_context()*
    |lir-context| を返します。

lir.float.init([{dir}])                                     *lir.float.init()*
    `dir` が nil の場合、`vim.fn.expand('%:p:h')` が使われます。

lir.float.toggle([{dir}])                                 *lir.float.toggle()*
    表示/非表示を切り替えます。

    `dir` が nil の場合、`vim.fn.expand('%:p:h')` が使われます。


==============================================================================
CONTEXT                                                          *lir-context*

|lir.get_context()| が返すテーブルです。


context.dir                                                  *lir-context.dir*
    lir のカレントディレクトリ

context.files                                              *lir-context.files*
    |lir-file-item| のリスト

context:current()                                      *lir-context:current()*
    カーソル下の |lir-file-item| を返します

        Return: ~
            (table) |lir-file-item|

context:current_items({mode})                    *lir-context:current_items()*
    {mode} が `'v'` なら、最後に選択されていた |lir-file-item| のリストを返し、
    {mode} が `'n'` か `nil` なら、カーソル下の |lir-file-item| のみのリスト
    を返します

        Return: ~
            (table) |lir-file-item| のリスト

context:current_value()                          *lir-context:current_value()*
    カーソル下の |lir-file-item| の `value` を返します

        Return: ~
            (string) |lir-file-item| の `value`

context:indexof({value})                               *lir-context:indexof()*
    {value} が |lir-context.files| の中で、何番目にあるかを返します
    files[n].value (|lir-file-item|.value) と {value} を比較します

        Return: ~
            (number)

context:is_dir_current()                        *lir-context:is_dir_current()*
    カーソル下の |lir-file-item| がディレクトリかを返します

        Return: ~
            (boolean) ディレクトリかどうか

context:get_marked_items()                    *lir-context:get_marked_items()*
    マークされている |lir-file-item| のリストを返します

        Return: ~
            (table) |lir-file-item| のリスト


------------------------------------------------------------------------------
LIR-FILE-ITEM                                                  *lir-file-item*

ファイルに関連する情報が入っているテーブル
このテーブルは |context:current()| や |context.files| で取得できます。


LIR-FILE-ITEM-ATTRIBUTES                            *lir-file-item-attributes*

value                                          *lir-file-item-attribute-value*
    ファイル名、ディレクトリ名

is_dir                                        *lir-file-item-attribute-is_dir*
    ディレクトリかどうか

fullpath                                    *lir-file-item-attribute-fullpath*
    フルパス

display                                      *lir-file-item-attribute-display*
    行に表示する値

marked                                        *lir-file-item-attribute-marked*
    マークされているかどうか

devicons                                    *lir-file-item-attribute-devicons*
    devicons のテーブル
    もし、devicons が無効なら nil

devicons.icon                          *lir-file-item-attribute-devicons-icon*
    アイコン

devicons.highlight_name      *lir-file-item-attribute-devicons-highlight_name*
    ハイライトの名前
    |nvim_buf_add_highlight()| に渡される値


==============================================================================
SETTINGS                                                        *lir-settings*

|lir.setup()| で設定できます。

デフォルト値: >

    {
      show_hidden_files = false,
      devicons_enable = false,
      mappings = {},
      float = {
        size_percentage = 0.5,
        winblend = 15,
        border = false,
        borderchars = {"═" , "║" , "═" , "║" , "╔" , "╗" , "╝" , "╚"},
      },
      hide_cursor = false
    }
<

show_hidden_files                             *lir-settings-show_hidden_files*
    デフォルトで先頭が `.` のファイルを表示するか

devicons_enable                                 *lir-settings-devicons_enable*
    devicons を表示するか

mappings                                               *lir-settings-mappings*
    table を指定する。
    自分で定義した関数を使用することもできます。

float.size_percentage                     *lir-settings-float.size_percentage*
    floating window で表示するウィンドウサイズの割合

float.winblend                                   *lir-settings-float.winblend*
    floating window で表示するウィンドウの透過度合い

float.border                                       *lir-settings-float.border*
    ボーダーを表示するか

float.borderchars                             *lir-settings-float.borderchars*
    ボーダーの文字

hide_cursor                                         *lir-settings-hide_cursor*
    カーソルを非表示にするか
    カーソルを表示する場合、先頭に空白が入る


設定例: >

    local actions = require'lir.actions'
    local mark_actions = require 'lir.mark.actions'
    local clipboard_actions = require'lir.clipboard.actions'
    
    require'lir'.setup {
      show_hidden_files = false,
      devicons_enable = true,
      mappings = {
        ['l']     = actions.edit,
        ['<C-s>'] = actions.split,
        ['<C-v>'] = actions.vsplit,
        ['<C-t>'] = actions.tabedit,
    
        ['h']     = actions.up,
        ['q']     = actions.quit,
    
        ['K']     = actions.mkdir,
        ['N']     = actions.newfile,
        ['R']     = actions.rename,
        ['@']     = actions.cd,
        ['Y']     = actions.yank_path,
        ['.']     = actions.toggle_show_hidden,

        ['J'] = function()
          mark_actions.toggle_mark()
          vim.cmd('normal! j')
        end,
        ['C'] = clipboard_actions.copy,
        ['X'] = clipboard_actions.cut,
        ['P'] = clipboard_actions.paste,
      },
      float = {
        size_percentage = 0.5,
        winblend = 15,
        border = true,
        borderchars = {"═" , "║" , "═" , "║" , "╔" , "╗" , "╝" , "╚"},
      }
    }
    
    -- custom folder icon
    require'nvim-web-devicons'.setup({
      override = {
        lir_folder_icon = {
          icon = "",
          color = "#7ebae4",
          name = "LirFolderNode"
        },
      }
    })

    -- use visual mode
    function _G.LirSettings()
      vim.api.nvim_buf_set_keymap(
        0, 'x', 'J',
        ':<C-u>lua require"lir.mark.actions".toggle_mark("v")<CR>', {noremap = true, silent = true})
    end

    vim.cmd [[augroup lir-settings]]
    vim.cmd [[  autocmd!]]
    vim.cmd [[  autocmd Filetype lir :lua LirSettings()]]
    vim.cmd [[augroup END]]
<

==============================================================================
ACTIONS                                                          *lir-actions*

マッピングに使用するための関数

------------------------------------------------------------------------------
Lua module: lir.acitons                                          *lir-actions*

edit()                                                    *lir.actions.edit()*
    カーソル下のファイルを|:edit| を使って開く。

split()                                                  *lir.actions.split()*
    カーソル下のファイルを|:new| を使って開く。

vsplit()                                                *lir.actions.vsplit()*
    カーソル下のファイルを|:vnew| を使って開く。

tabedit()                                              *lir.actions.tabedit()*
    カーソル下のファイルを|:tabedit| を使って開く。

up()                                                        *lir.actions.up()*
    ひとつ上のディレクトリに移動する。

quit()                                                    *lir.actions.quit()*
    lir を閉じる。

mkdir()                                                  *lir.actions.mkdir()*
    ディレクトリを作成する。

rename()                                                *lir.actions.rename()*
    ファイル名を変更する。

delete()                                                *lir.actions.delete()*
    ファイルを削除する。

newfile()                                              *lir.actions.newfile()*
    ファイルを新規作成する。

cd()                                                        *lir.actions.cd()*
    Vim のカレントディレクトリを lir のディレクトリ (|lir-context.dir|) に変更
    する。
    |:lcd| か |:cd| を使う

reload()                                                *lir.actions.reload()*
    lir を再表示します。

yank_path()                                          *lir.actions.yank_path()*
    カーソル下のファイルパスを |v:register| のレジスタにヤンクします。

toggle_show_hidden()                        *lir.actions.toggle_show_hidden()*
    先頭が `.` のファイルの表示/非表示を切り替える。


------------------------------------------------------------------------------
Lua module: lir.mark.acitons                                *lir-mark-actions*

mark({mode})                                         *lir.mark.actions.mark()*
    マークを付ける

        Parameters: ~
            {mode} (string) モードを表す1文字。
                    `'n'` か `'v'` のどちらか。デフォルトは `'n'`

unmark({mode})                                       *lir.mark.actions.mark()*
    マークを外す
    
        Parameters: ~
            {mode} (string) モードを表す1文字。
                    `'n'` か `'v'` のどちらか。デフォルトは `'n'`

toggle({mode})                                     *lir.mark.actions.toggle()*
    マークを切り替える
    
        Parameters: ~
            {mode} (string) モードを表す1文字。
                    `'n'` か `'v'` のどちらか。デフォルトは `'n'`

------------------------------------------------------------------------------
Lua module: lir.clipboard.acitons                                *lir-actions*

copy()                                          *lir.clipboard.actions.copy()*
    マークしているアイテムをコピー対象としてクリップボードに保存する

cut()                                            *lir.clipboard.actions.cut()*
    マークしているアイテムを切り取り対象としてクリップボードに保存する

paste()                                        *lir.clipboard.actions.paste()*
    クリップボードに保存されているアイテムを貼り付ける


==============================================================================
vim:tw=78:sw=4:sts=4:ts=4:ft=help:norl:et
